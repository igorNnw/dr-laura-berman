{% include 'password-protect-variables' %}



{% if product.id %}
{% assign entity = "Product" %}
{% assign entity_id = product.id | downcase %}
{% assign entity_locks = product_locks_str | split: ',' %}
{% elsif collection.id %}
{% assign entity = "Collection" %}
{% assign entity_id = collection.id | downcase %}
{% assign entity_locks = collection_locks_str | split: ',' %}
{% elsif article.id %}
{% assign entity = "Article" %}
{% assign entity_id = article.id | downcase %}
{% assign entity_locks = article_locks_str | split: ',' %}
{% elsif page.id %}
{% assign entity = "Page" %}
{% assign entity_id = page.id | downcase %}
{% assign entity_locks = page_locks_str | split: ',' %}
{% endif %}

{% assign authorized_passwords = cart.attributes['authorized_passwords'] | split: ',' %}

{% assign final_lock = nil %}

{% if entity == "Product" %}

{% for lock in entity_locks %}
{% assign lock_attributes = lock | split: '#' %}
{% if entity_id == lock_attributes[0] %}
{% unless authorized_passwords contains lock_attributes[2] %}
{% assign final_lock = lock | append: '#Product' %}
{% break %}
{% endunless %}
{% endif %}
{% endfor %}

{% assign collection_locks = collection_locks_str | split: ',' %}
{% for collection in product.collections %}
{% assign collection_id = collection.id | downcase %}
{% assign collection_unlocked = false %}
{% for lock in collection_locks %}
{% assign lock_attributes = lock | split: '#' %}
{% if collection_id == lock_attributes[0] %}
{% if authorized_passwords contains lock_attributes[2] %}
{% assign final_lock = nil %}
{% assign collection_unlocked = true %}
{% break %}
{% else %}
{% assign final_lock = lock | append: '#Collection' %}
{% endif %}
{% endif %}
{% endfor %}
{% if collection_unlocked %}
{% break %}
{% endif %}
{% endfor %}

{% else %}

{% for lock in entity_locks %}
{% assign lock_attributes = lock | split: '#' %}
{% if entity_id == lock_attributes[0] %}
{% unless authorized_passwords contains lock_attributes[2] %}
{% assign final_lock = lock | append: '#' | append: entity %}
{% break %}
{% endunless %}
{% endif %}
{% endfor %}

{% endif %}

{% unless final_lock %}
{{ captured_page }}
{% else %}
{% assign lock_attributes = final_lock | split: '#' %}


<div style="max-width: 600px; margin: 20px auto; text-align: center;" id="password-protect-login-div" class="content">
  <h1>VIP</h1>
  <p>Enter your password to access this page. <br /><a href="mailto:schapman@primemediamanagement.com">Don't have a password?</a></p>
    <h4 id="loginMessageContainer"></h4>
    <form onSubmit="authenticate(); return false;">
        <input id="entity" type="hidden" value='{{ lock_attributes[3] }}' />
        <input id="entity_id" type="hidden" value='{{ lock_attributes[0] }}' />
        <input id="entity_password" type="password" placeholder="Enter password" name="password" required autofocus />
        <p style="color: red; display: none;" id="passwordError">That password was incorrect. Please try again.</p>
        <input type="submit" class="btn" id="passwordSubmit" value="Submit" />
    </form>
</div>
<div style="max-width: 600px; margin: 20px auto; display: none;" id="password-protect-uninstall-div">
    <h4>Finish uninstalling Mr.Locker</h4>
    <p>
        This page is protected by Mr.Locker, which was recently uninstalled from this Shopify store.
    </p>
    <p>
        If you are the site admin, contact HarttMedia for removal
    </p>
</div>

<script type="text/javascript">
    // Fetch polyfill
    (function(self) {
        'use strict';

        if (self.fetch) {
            return
        }

        var support = {
            searchParams: 'URLSearchParams' in self,
            iterable: 'Symbol' in self && 'iterator' in Symbol,
            blob: 'FileReader' in self && 'Blob' in self && (function() {
                try {
                    new Blob()
                    return true
                } catch(e) {
                    return false
                }
            })(),
            formData: 'FormData' in self,
            arrayBuffer: 'ArrayBuffer' in self
        }

        if (support.arrayBuffer) {
            var viewClasses = [
                '[object Int8Array]',
                '[object Uint8Array]',
                '[object Uint8ClampedArray]',
                '[object Int16Array]',
                '[object Uint16Array]',
                '[object Int32Array]',
                '[object Uint32Array]',
                '[object Float32Array]',
                '[object Float64Array]'
            ]

            var isDataView = function(obj) {
                return obj && DataView.prototype.isPrototypeOf(obj)
            }

            var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
            }
        }

        function normalizeName(name) {
            if (typeof name !== 'string') {
                name = String(name)
            }
            if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
                throw new TypeError('Invalid character in header field name')
            }
            return name.toLowerCase()
        }

        function normalizeValue(value) {
            if (typeof value !== 'string') {
                value = String(value)
            }
            return value
        }

        // Build a destructive iterator for the value list
        function iteratorFor(items) {
            var iterator = {
                next: function() {
                    var value = items.shift()
                    return {done: value === undefined, value: value}
                }
            }

            if (support.iterable) {
                iterator[Symbol.iterator] = function() {
                    return iterator
                }
            }

            return iterator
        }

        function Headers(headers) {
            this.map = {}

            if (headers instanceof Headers) {
                headers.forEach(function(value, name) {
                    this.append(name, value)
                }, this)
            } else if (Array.isArray(headers)) {
                headers.forEach(function(header) {
                    this.append(header[0], header[1])
                }, this)
            } else if (headers) {
                Object.getOwnPropertyNames(headers).forEach(function(name) {
                    this.append(name, headers[name])
                }, this)
            }
        }

        Headers.prototype.append = function(name, value) {
            name = normalizeName(name)
            value = normalizeValue(value)
            var oldValue = this.map[name]
            this.map[name] = oldValue ? oldValue+','+value : value
        }

        Headers.prototype['delete'] = function(name) {
            delete this.map[normalizeName(name)]
        }

        Headers.prototype.get = function(name) {
            name = normalizeName(name)
            return this.has(name) ? this.map[name] : null
        }

        Headers.prototype.has = function(name) {
            return this.map.hasOwnProperty(normalizeName(name))
        }

        Headers.prototype.set = function(name, value) {
            this.map[normalizeName(name)] = normalizeValue(value)
        }

        Headers.prototype.forEach = function(callback, thisArg) {
            for (var name in this.map) {
                if (this.map.hasOwnProperty(name)) {
                    callback.call(thisArg, this.map[name], name, this)
                }
            }
        }

        Headers.prototype.keys = function() {
            var items = []
            this.forEach(function(value, name) { items.push(name) })
            return iteratorFor(items)
        }

        Headers.prototype.values = function() {
            var items = []
            this.forEach(function(value) { items.push(value) })
            return iteratorFor(items)
        }

        Headers.prototype.entries = function() {
            var items = []
            this.forEach(function(value, name) { items.push([name, value]) })
            return iteratorFor(items)
        }

        if (support.iterable) {
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries
        }

        function consumed(body) {
            if (body.bodyUsed) {
                return Promise.reject(new TypeError('Already read'))
            }
            body.bodyUsed = true
        }

        function fileReaderReady(reader) {
            return new Promise(function(resolve, reject) {
                reader.onload = function() {
                    resolve(reader.result)
                }
                reader.onerror = function() {
                    reject(reader.error)
                }
            })
        }

        function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader()
            var promise = fileReaderReady(reader)
            reader.readAsArrayBuffer(blob)
            return promise
        }

        function readBlobAsText(blob) {
            var reader = new FileReader()
            var promise = fileReaderReady(reader)
            reader.readAsText(blob)
            return promise
        }

        function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf)
            var chars = new Array(view.length)

            for (var i = 0; i < view.length; i++) {
                chars[i] = String.fromCharCode(view[i])
            }
            return chars.join('')
        }

        function bufferClone(buf) {
            if (buf.slice) {
                return buf.slice(0)
            } else {
                var view = new Uint8Array(buf.byteLength)
                view.set(new Uint8Array(buf))
                return view.buffer
            }
        }

        function Body() {
            this.bodyUsed = false

            this._initBody = function(body) {
                this._bodyInit = body
                if (!body) {
                    this._bodyText = ''
                } else if (typeof body === 'string') {
                    this._bodyText = body
                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                    this._bodyBlob = body
                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                    this._bodyFormData = body
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this._bodyText = body.toString()
                } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                    this._bodyArrayBuffer = bufferClone(body.buffer)
                    // IE 10-11 can't handle a DataView body.
                    this._bodyInit = new Blob([this._bodyArrayBuffer])
                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                    this._bodyArrayBuffer = bufferClone(body)
                } else {
                    throw new Error('unsupported BodyInit type')
                }

                if (!this.headers.get('content-type')) {
                    if (typeof body === 'string') {
                        this.headers.set('content-type', 'text/plain;charset=UTF-8')
                    } else if (this._bodyBlob && this._bodyBlob.type) {
                        this.headers.set('content-type', this._bodyBlob.type)
                    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
                    }
                }
            }

            if (support.blob) {
                this.blob = function() {
                    var rejected = consumed(this)
                    if (rejected) {
                        return rejected
                    }

                    if (this._bodyBlob) {
                        return Promise.resolve(this._bodyBlob)
                    } else if (this._bodyArrayBuffer) {
                        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
                    } else if (this._bodyFormData) {
                        throw new Error('could not read FormData body as blob')
                    } else {
                        return Promise.resolve(new Blob([this._bodyText]))
                    }
                }

                this.arrayBuffer = function() {
                    if (this._bodyArrayBuffer) {
                        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
                    } else {
                        return this.blob().then(readBlobAsArrayBuffer)
                    }
                }
            }

            this.text = function() {
                var rejected = consumed(this)
                if (rejected) {
                    return rejected
                }

                if (this._bodyBlob) {
                    return readBlobAsText(this._bodyBlob)
                } else if (this._bodyArrayBuffer) {
                    return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
                } else if (this._bodyFormData) {
                    throw new Error('could not read FormData body as text')
                } else {
                    return Promise.resolve(this._bodyText)
                }
            }

            if (support.formData) {
                this.formData = function() {
                    return this.text().then(decode)
                }
            }

            this.json = function() {
                return this.text().then(JSON.parse)
            }

            return this
        }

        // HTTP methods whose capitalization should be normalized
        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

        function normalizeMethod(method) {
            var upcased = method.toUpperCase()
            return (methods.indexOf(upcased) > -1) ? upcased : method
        }

        function Request(input, options) {
            options = options || {}
            var body = options.body

            if (input instanceof Request) {
                if (input.bodyUsed) {
                    throw new TypeError('Already read')
                }
                this.url = input.url
                this.credentials = input.credentials
                if (!options.headers) {
                    this.headers = new Headers(input.headers)
                }
                this.method = input.method
                this.mode = input.mode
                if (!body && input._bodyInit != null) {
                    body = input._bodyInit
                    input.bodyUsed = true
                }
            } else {
                this.url = String(input)
            }

            this.credentials = options.credentials || this.credentials || 'omit'
            if (options.headers || !this.headers) {
                this.headers = new Headers(options.headers)
            }
            this.method = normalizeMethod(options.method || this.method || 'GET')
            this.mode = options.mode || this.mode || null
            this.referrer = null

            if ((this.method === 'GET' || this.method === 'HEAD') && body) {
                throw new TypeError('Body not allowed for GET or HEAD requests')
            }
            this._initBody(body)
        }

        Request.prototype.clone = function() {
            return new Request(this, { body: this._bodyInit })
        }

        function decode(body) {
            var form = new FormData()
            body.trim().split('&').forEach(function(bytes) {
                if (bytes) {
                    var split = bytes.split('=')
                    var name = split.shift().replace(/\+/g, ' ')
                    var value = split.join('=').replace(/\+/g, ' ')
                    form.append(decodeURIComponent(name), decodeURIComponent(value))
                }
            })
            return form
        }

        function parseHeaders(rawHeaders) {
            var headers = new Headers()
            // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
            // https://tools.ietf.org/html/rfc7230#section-3.2
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
            preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
                var parts = line.split(':')
                var key = parts.shift().trim()
                if (key) {
                    var value = parts.join(':').trim()
                    headers.append(key, value)
                }
            })
            return headers
        }

        Body.call(Request.prototype)

        function Response(bodyInit, options) {
            if (!options) {
                options = {}
            }

            this.type = 'default'
            this.status = options.status === undefined ? 200 : options.status
            this.ok = this.status >= 200 && this.status < 300
            this.statusText = 'statusText' in options ? options.statusText : 'OK'
            this.headers = new Headers(options.headers)
            this.url = options.url || ''
            this._initBody(bodyInit)
        }

        Body.call(Response.prototype)

        Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new Headers(this.headers),
                url: this.url
            })
        }

        Response.error = function() {
            var response = new Response(null, {status: 0, statusText: ''})
            response.type = 'error'
            return response
        }

        var redirectStatuses = [301, 302, 303, 307, 308]

        Response.redirect = function(url, status) {
            if (redirectStatuses.indexOf(status) === -1) {
                throw new RangeError('Invalid status code')
            }

            return new Response(null, {status: status, headers: {location: url}})
        }

        self.Headers = Headers
        self.Request = Request
        self.Response = Response

        self.fetch = function(input, init) {
            return new Promise(function(resolve, reject) {
                var request = new Request(input, init)
                var xhr = new XMLHttpRequest()

                xhr.onload = function() {
                    var options = {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                    }
                    options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
                    var body = 'response' in xhr ? xhr.response : xhr.responseText
                    resolve(new Response(body, options))
                }

                xhr.onerror = function() {
                    reject(new TypeError('Network request failed'))
                }

                xhr.ontimeout = function() {
                    reject(new TypeError('Network request failed'))
                }

                xhr.open(request.method, request.url, true)

                if (request.credentials === 'include') {
                    xhr.withCredentials = true
                } else if (request.credentials === 'omit') {
                    xhr.withCredentials = false
                }


                if ('responseType' in xhr && support.blob) {
                    xhr.responseType = 'blob'
                }

                request.headers.forEach(function(value, name) {
                    xhr.setRequestHeader(name, value)
                })

                xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
            })
        }
        self.fetch.polyfill = true
    })(typeof self !== 'undefined' ? self : this);
</script>

<script type="text/javascript">
    // Ajax Get Cart
    const getCart = function() {
        return fetch('/cart.js', {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });
    };

    // Ajax Update Cart
    const updateCart = function(payload) {
        payload = payload || {};
        return fetch('/cart/update.js', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin',
            body: JSON.stringify(payload)
        });
    };

    // Ajax authenticate
    const authenticate = function() {
        const errorMessage = document.getElementById('passwordError');
        errorMessage.style.display = "none";

        const submitElement = document.getElementById('passwordSubmit');
        submitElement.setAttribute('disabled', true);

        const entity = document.getElementById('entity').value;
        const entity_id = document.getElementById('entity_id').value;
        const password = document.getElementById('entity_password').value;
        const payload = {entity: entity, entity_id: entity_id , password: password};

        fetch('/apps/locker/auth', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            credentials: 'same-origin',
            body: JSON.stringify(payload)
        }).then(function(authenticateResponse) {
            if (authenticateResponse && authenticateResponse.ok) {
                console.log("Authentication Successful");
                return getCart();
            } else if (authenticateResponse.status == 404) {
                console.error("Unable to find a lock for this page.");
            } else if (authenticateResponse.status == 403) {
                errorMessage.style.display = "block";
            }
            throw new Error('Network response was not ok.');
        }).then(function(cartResponse) {
            if(cartResponse.ok) {
                return cartResponse.json();
            }
            throw new Error('Network response was not ok.');
        }).then(function(cartData) {
            var new_authorized_passwords = password;
            if (cartData.attributes.authorized_passwords) {
                new_authorized_passwords += "," + cartData.attributes.authorized_passwords;
            }
            return updateCart({attributes: {authorized_passwords: new_authorized_passwords}});
        }).then(function(cartUpdateResponse) {
            console.log("Attributes updated successfully");
            location.reload();
        }).catch(function(error) {
            submitElement.removeAttribute('disabled');
            console.log('Authentication API Error: ' + error.message);
        });
        return false;
    };

    const verifyAppInstalled = function() {
        var login_div = document.getElementById("password-protect-login-div");
        if (login_div != null) {
            // verify app installed
            fetch('/apps/locker/uninstalled', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                }
            }).then(function(response) {
                if (response.status == 404) {
                    const loginElement = document.getElementById('password-protect-login-div');
                    loginElement.style.display = 'none';
                    const uninstallElement = document.getElementById('password-protect-uninstall-div');
                    uninstallElement.style.display = 'block';
                    console.log("App uninstalled confirmed");
                    return;
                } else if (response.status != 200) {
                    throw new Error('Network response was not ok.');
                }
            }).catch(function(error) {
                console.log('Authentication API Error: ' + error.message);
            });
        }
    };

    window.addEventListener("load", function(event) {
        verifyAppInstalled();


    });
</script>
{% endunless %}
